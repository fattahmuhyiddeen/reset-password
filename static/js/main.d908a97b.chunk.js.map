{"version":3,"sources":["OccupancyProblem.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["styles","inputContainer","margin","button","backgroundColor","borderRadius","cursor","App","state","password","repassword","email","forgotPasswordToken","resendPassword","_this$state","_this","alert","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","catch","onChange","type","value","setState","Object","defineProperty","handleFocus","event","target","select","data","queryString","parseUrl","window","location","href","query","this","e","replace","k","_this2","_this$state2","react_default","a","createElement","style","onFocus","onClick","React","Component","className","src","logo","alt","OccupancyProblem_App","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6SAGMA,EAAS,CACbC,eAAgB,CACdC,OAAQ,QAEVC,OAAQ,CACNC,gBAAiB,QAASC,aAAc,GAAIC,OAAQ,YAGnCC,6MACnBC,MAAQ,CACNC,SAAU,GACVC,WAAY,GACZC,MAAO,GACPC,oBAAqB,MAYvBC,eAAiB,WAAM,IAAAC,EACYC,EAAKP,MAA9BC,EADaK,EACbL,SAAUC,EADGI,EACHJ,WAClB,MAAiB,KAAbD,EACKO,MAAM,yBAEXP,IAAaC,EACRM,MAAM,+BAEfC,MAAM,+BAAgC,CACpCC,OAAQ,OACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUT,EAAKP,SACzBiB,OAAOC,MAAMV,MAAM,+BAExBW,SAAW,SAACC,EAAMC,GAAP,OAAiBd,EAAKe,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBH,EAAOC,OAGpDI,YAAc,SAACC,GAAD,OAAWA,EAAMC,OAAOC,6FA3BpC,IAAMC,EAAOC,IAAYC,SAASC,OAAOC,SAASC,MAE9CL,EAAKM,OACPC,KAAKd,SAAS,CAAEnB,MAAO0B,EAAKM,MAAME,EAAEC,QAAQ,MAAO,KAAMlC,oBAAqByB,EAAKM,MAAMI,qCA0BpF,IAAAC,EAAAJ,KAAAK,EAC0BL,KAAKpC,MAA9BC,EADDwC,EACCxC,SAAUC,EADXuC,EACWvC,WAClB,OACEwC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,MAAOrD,EAAOC,gBAAnB,cAA+CiD,EAAAC,EAAAC,cAAA,SAAOxB,KAAK,WAAW0B,QAASV,KAAKX,YAAaN,SAAU,SAACkB,GAAD,OAAOG,EAAKrB,SAAS,WAAYkB,EAAEV,OAAON,QAAQA,MAAOpB,KACpKyC,EAAAC,EAAAC,cAAA,OAAKC,MAAOrD,EAAOC,gBAAnB,qBAAsDiD,EAAAC,EAAAC,cAAA,SAAOxB,KAAK,WAAW0B,QAASV,KAAKX,YAAaN,SAAU,SAACkB,GAAD,OAAOG,EAAKrB,SAAS,aAAckB,EAAEV,OAAON,QAAQA,MAAOnB,KAC7KwC,EAAAC,EAAAC,cAAA,OAAKC,MAAOrD,EAAOG,OAAQoD,QAASX,KAAK/B,gBAAzC,mBA7CyB2C,IAAMC,WCOxBlD,mLAXX,OACE2C,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAChBR,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCX,EAAAC,EAAAC,cAACU,EAAD,eANQL,aCOEM,QACW,cAA7BvB,OAAOC,SAASuB,UAEe,UAA7BxB,OAAOC,SAASuB,UAEhBxB,OAAOC,SAASuB,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.d908a97b.chunk.js","sourcesContent":["import React from 'react';\nimport queryString from 'query-string'\n\nconst styles = {\n  inputContainer: {\n    margin: '10px'\n  },\n  button: {\n    backgroundColor: 'green', borderRadius: 30, cursor: 'pointer'\n  }\n}\nexport default class App extends React.Component {\n  state = {\n    password: '',\n    repassword: '',\n    email: '',\n    forgotPasswordToken: ''\n  }\n\n  componentDidMount() {\n    // const data = queryString.parse(window.location.href)\n    const data = queryString.parseUrl(window.location.href)\n    // alert(JSON.stringify(data))\n    if (data.query) {\n      this.setState({ email: data.query.e.replace(\"%40\", \"@\"), forgotPasswordToken: data.query.k })\n    }\n  }\n\n  resendPassword = () => {\n    const { password, repassword } = this.state\n    if (password === '') {\n      return alert(\"Please enter password\")\n    }\n    if (password !== repassword) {\n      return alert(\"Password did not match\")\n    }\n    fetch('http://54.169.122.165/forget', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.state),\n    }).then().catch(alert(\"Sorry, please try later\"));\n  }\n  onChange = (type, value) => this.setState({ [type]: value })\n\n\n  handleFocus = (event) => event.target.select()\n\n  render() {\n    const { password, repassword } = this.state\n    return (\n      <div>\n        <div style={styles.inputContainer} >Password : <input type=\"password\" onFocus={this.handleFocus} onChange={(e) => this.onChange('password', e.target.value)} value={password} /></div>\n        <div style={styles.inputContainer} >Retype Password : <input type=\"password\" onFocus={this.handleFocus} onChange={(e) => this.onChange('repassword', e.target.value)} value={repassword} /></div>\n        <div style={styles.button} onClick={this.resendPassword}>Proceed</div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport OccupancyProblem from './OccupancyProblem'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <OccupancyProblem />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}